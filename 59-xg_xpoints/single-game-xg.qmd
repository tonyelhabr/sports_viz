---
title: "single-game-xg"
format: html
editor: visual
---

## On the Abuse of Single Game xG Difference

It's time we had a conversation. But who are we? Well, you are you, and me--I'm just a guy who cannot understand the abuse of xG used as a single-game metric. It's really that simple. xG is a useful tool to describe a single shot (micro) and to describe how a teamperformed over a whole season (macro), but we could really use something else to help us describe how a match If we treat xG as if it is a probability when describing a single shot, why don't we use a probabilistic framework to describe how likely the match outcome was? Why do we add probabilities over the course of a game? This has always dumbfounded me.

```{r}
#| echo: false
library(tidyverse)
library(worldfootballR)
```

Let's look at that Conte-Tuchel handshake game. (Anthony Taylor will pay for his crimes.)

```{r}
#| echo: false
tot_xG_understat <-
  understat_match_shots("https://understat.com/match/18220") |> 
  as_tibble() |> 
  select(season, match_id, home_away, xG) |> 
  group_by(home_away) |> 
  summarize(xG_tot = sum(xG))

tot_xG_understat

team_a_fotmob <- fotmob_get_match_details("3900946") |> pull(away_team_id)
team_h_fotmob <- fotmob_get_match_details("3900946") |> pull(home_team_id)

tot_xG_fotmob <-
  fotmob_get_match_details("3900946") |> 
  select(team_id, expected_goals) |> 
  mutate(home_away = case_when(team_id == team_a_fotmob ~ "a",
                               team_id == team_h_fotmob ~ "h",
                               TRUE ~ NA_character_)) |>
  select(-team_id) |>
  group_by(home_away) |> 
  summarize(xG_tot = sum(expected_goals))

tot_xG_fotmob
```

```{r}
#| echo: false

compute_goal_prob <- function(df){
  
  prob_idx <- rep(0, nrow(df))
  for (i in 1:nrow(df)) {
    if (i == 1){
      prob_idx[i] <- df[i, 2]
      prob_idx[i+1] <- df[i, 1]
    } else if(i == 2) {
      prob_idx[i+1] <- df[i, 1]*prob_idx[i]
      prob_idx[i] <- df[i, 2]*prob_idx[i] + df[i, 1]*prob_idx[i-1]
      prob_idx[1] <- df[i, 2]*prob_idx[1]
    } else {
      prob_idx[i+1] <- df[i, 1]*prob_idx[i]
      prob_idx[i] <- df[i, 2]*prob_idx[i] + df[i, 1]*prob_idx[i-1]
      for (j  in 1:(i-2)){
        prob_idx[i-j] <- df[i, 2]*prob_idx[i-j] + df[i, 1]*prob_idx[i-j-1]
      }
      prob_idx[1] <- df[i, 2]*prob_idx[1]
    }
  }
  return(prob_idx |> unlist() |> as_tibble() |> mutate(cumprob = cumsum(value)))
  
}

```

```{r}
#| echo: false

xG_both_understat <-
  understat_match_shots("https://understat.com/match/18220") |> 
  as_tibble() |> 
  select(season, match_id, home_away, home_team, away_team, xG) |>
  mutate(miss = 1 - xG) |>
  rename(make = xG) |>
  group_by(season, match_id, home_away, home_team, away_team) |>
  nest() |> 
  summarize(map_dfr(data, compute_goal_prob), .groups = "drop") |> 
  select(season, match_id, home_away, home_team, away_team, value) |>
  group_by(season, match_id, home_away) |>
  mutate(i = row_number() - 1) |>
  relocate(i, .before = season) |>
  ungroup()

team_a_fotmob <- fotmob_get_match_details("3900946") |> pull(away_team_id) |> unique()
team_h_fotmob <- fotmob_get_match_details("3900946") |> pull(home_team_id) |> unique()
#fotmob_get_match_details("3900946") |> pull(away_team) |> str_extract(pattern = "[A-z]+(?=\\s)")
#fotmob_get_match_details("3900946") |> pull(shots) |> .[[1]] |> as_tibble() |> select(team_id, expected_goals)

xG_both_fotmob <-
  fotmob_get_match_details("3900946") |> 
  select(team_id, expected_goals) |>
  mutate(miss = 1 - expected_goals) |>
  rename(make = expected_goals) |>
  group_by(team_id) |>
  nest() |>
  summarize(map_dfr(data, compute_goal_prob), .groups = "drop") |> 
  group_by(team_id) |>
  mutate(i = row_number() - 1) |>
  relocate(i, .before = team_id) |>
  ungroup()

```

```{r}

xG_away_understat <- 
  xG_both_understat |> 
  filter(home_away == "a") |> 
  select(-home_away) |>
  mutate(team_id = case_when(away_team == "Chelsea" ~ 8455L,
                             away_team == "Tottenham" ~ 8586L,
                             TRUE ~ NA_integer_)) |>
  select(-home_team, -away_team)

xG_home_understat <- 
  xG_both_understat |> 
  filter(home_away == "h") |> 
  select(-home_away) |>
  mutate(team_id = case_when(home_team == "Chelsea" ~ 8455L,
                             home_team == "Tottenham" ~ 8586L,
                             TRUE ~ NA_integer_)) |>
  select(-home_team, -away_team)

goal_prob_both_understat <-
  xG_away_understat |> 
  full_join(xG_home_understat, by = c("i", "season", "match_id"), suffix = c("_a", "_h")) |>
  mutate(draw = value_a*value_h)




xG_away_fotmob <- 
  xG_both_fotmob |> 
  filter(team_id == team_a_fotmob)

xG_home_fotmob <- 
  xG_both_fotmob |> 
  filter(team_id == team_h_fotmob)

goal_prob_both_fotmob <-
  xG_away_fotmob |> 
  full_join(xG_home_fotmob, by = c("i"), suffix = c("_a", "_h")) |>
  mutate(draw = value_a*value_h)
#why is there cumprob here?

```

```{r}

outer_prod_understat <- goal_prob_both_understat$value_a %o% goal_prob_both_understat$value_h
p_draw_understat <- sum(diag(outer_prod_understat), na.rm = TRUE)
p_home_understat <- sum(gdata::upperTriangle(outer_prod_understat), na.rm = TRUE)
p_away_understat <- sum(gdata::lowerTriangle(outer_prod_understat), na.rm = TRUE)

p_draw_understat
p_home_understat
p_away_understat

outer_prod_fotmob <- goal_prob_both_fotmob$value_a %o% goal_prob_both_fotmob$value_h
p_draw_fotmob <- sum(diag(outer_prod_fotmob), na.rm = TRUE)
p_home_fotmob <- sum(gdata::upperTriangle(outer_prod_fotmob), na.rm = TRUE)
p_away_fotmob <- sum(gdata::lowerTriangle(outer_prod_fotmob), na.rm = TRUE)

p_draw_fotmob
p_home_fotmob
p_away_fotmob

```

```{r}

n <- 10000

set.seed(3928420)
sim_a_understat <- rpois(n, tot_xG_understat[1,]$xG_tot)
sim_h_understat <- rpois(n, tot_xG_understat[2,]$xG_tot)

sum(sim_a_understat == sim_h_understat)/n
sum(sim_a_understat < sim_h_understat)/n
sum(sim_a_understat > sim_h_understat)/n

sim_a_fotmob <- rpois(n, tot_xG_fotmob[1,]$xG_tot)
sim_h_fotmob <- rpois(n, tot_xG_fotmob[2,]$xG_tot)

sum(sim_a_fotmob == sim_h_fotmob)/n
sum(sim_a_fotmob < sim_h_fotmob)/n
sum(sim_a_fotmob > sim_h_fotmob)/n

```

The next time you catch yourself saying "the xG doesn't capture what really happened in the game", think again. I mean, you're mostly right. But this framework should help better capture the likelihood of the outcome that was observed.
